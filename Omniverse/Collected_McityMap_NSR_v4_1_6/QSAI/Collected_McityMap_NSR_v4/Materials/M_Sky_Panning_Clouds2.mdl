mdl 1.6;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
import ::scene::*;
using ..::OmniUe4Function import *;
using ..::OmniUe4Base import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material M_Sky_Panning_Clouds2(
	float4 ZenithColor = float4(0.085177,0.153746,0.35,1.0)
	[[
		anno::display_name("Zenith Color"),
		anno::ui_order(32),
		anno::in_group("Sky")
	]],
	float Starsbrightness = 0.1
	[[
		anno::display_name("Stars brightness"),
		anno::ui_order(32)
	]],
	float Sunheight = 1.0
	[[
		anno::display_name("Sun height"),
		anno::ui_order(32)
	]],
	float4 Horizoncolor = float4(0.940601,1.0,1.0,1.0)
	[[
		anno::display_name("Horizon color"),
		anno::ui_order(32),
		anno::in_group("Sky")
	]],
	float HorizonFalloff = 3.0
	[[
		anno::display_name("Horizon Falloff"),
		anno::ui_order(32),
		anno::in_group("Sky")
	]],
	float4 Lightdirection = float4(-2.0,0.0,-1.0,1.0)
	[[
		anno::display_name("Light direction"),
		anno::ui_order(32),
		anno::in_group("Sun")
	]],
	float SunRadius = 0.0003
	[[
		anno::display_name("Sun Radius"),
		anno::ui_order(32),
		anno::in_group("Sun")
	]],
	float4 Suncolor = float4(1.0,0.8,0.4,1.0)
	[[
		anno::display_name("Sun color"),
		anno::ui_order(32),
		anno::in_group("Sun")
	]],
	float Sunbrightness = 50.0
	[[
		anno::display_name("Sun brightness"),
		anno::ui_order(32)
	]],
	float4 Cloudcolor = float4(0.71685,0.782221,0.885,0.0)
	[[
		anno::display_name("Cloud color"),
		anno::ui_order(32),
		anno::in_group("CloudColors")
	]],
	float Cloudspeed = 0.1
	[[
		anno::display_name("Cloud speed"),
		anno::ui_order(32),
		anno::in_group("Animation")
	]],
	float Cloudopacity = 1.0
	[[
		anno::display_name("Cloud opacity"),
		anno::ui_order(32)
	]],
	float NoisePower1 = 1.0
	[[
		anno::display_name("NoisePower1"),
		anno::ui_order(32),
		anno::in_group("Animation")
	]],
	float NoisePower2 = 4.0
	[[
		anno::display_name("NoisePower2"),
		anno::ui_order(32),
		anno::in_group("Animation")
	]],
	float4 OverallColor = float4(1.0,1.0,1.0,1.0)
	[[
		anno::display_name("Overall Color"),
		anno::ui_order(32),
		anno::in_group("Global")
	]],
	int MaxTexCoordIndex = 3
	[[
		anno::hidden()
	]])
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);
	float2 CustomizedUV0_mdl = float2(state::texture_coordinate(math::min(0,MaxTexCoordIndex)).x,1.0-state::texture_coordinate(math::min(0,MaxTexCoordIndex)).y);
	float2 CustomizedUV1_mdl = float2(state::texture_coordinate(math::min(1,MaxTexCoordIndex)).x,1.0-state::texture_coordinate(math::min(1,MaxTexCoordIndex)).y);



	float2 Local0 = (CustomizedUV1_mdl * 12.0);
	float4 Local1 = tex::lookup_float4(texture_2d("./Textures/T_Sky_Stars.png",::tex::gamma_srgb),float2(Local0.x,1.0-Local0.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local2 = (float3(Local1.x,Local1.y,Local1.z) * Starsbrightness);
	float3 Local3 = (Local2 * Sunheight);
	float3 Local4 = (float3(ZenithColor.x,ZenithColor.y,ZenithColor.z) + Local3);
	float Local5 = math::dot(::camera_vector(true), float3(0.0,0.0,-1.0));
	float Local6 = math::min(math::max(Local5,0.0),1.0);
	float Local7 = (1.0 - Local6);
	float Local8 = math::pow(math::max(Local7,float(0.000001)),HorizonFalloff);
	float Local9 = math::min(math::max(Local8,0.0),1.0);
	float3 Local10 = math::lerp(Local4,float3(Horizoncolor.x,Horizoncolor.y,Horizoncolor.z),Local9);
	float3 Local11 = math::normalize(float3(Lightdirection.x,Lightdirection.y,Lightdirection.z));
	float Local12 = math::dot(::camera_vector(true), Local11);
	float Local13 = (Local12 - 1.0);
	float Local14 = math::abs(Local13);
	float Local15 = math::max(0.00001,SunRadius);
	float Local16 = (1.0 / Local15);
	float Local17 = (Local14 * Local16);
	float Local18 = (1.0 - Local17);
	float Local19 = (Local18 * 1.0);
	float Local20 = math::saturate(Local19);
	float3 Local21 = (float3(Suncolor.x,Suncolor.y,Suncolor.z) * Sunbrightness);
	float3 Local22 = (Local20 * Local21);
	float3 Local23 = (Local10 + Local22);
	float Local24 = (state::animation_time() * Cloudspeed);
	float Local25 = (Local24 * 0.0002);
	float Local26 = math::frac(Local25);
	float Local27 = (Local24 * 0.0);
	float Local28 = math::frac(Local27);
	float2 Local29 = (float2(Local26,Local28) + CustomizedUV0_mdl);
	float4 Local30 = tex::lookup_float4(texture_2d("./Textures/T_Sky_Blue.png",::tex::gamma_srgb),float2(Local29.x,1.0-Local29.y),tex::wrap_repeat,tex::wrap_clamp);
	float Local31 = (Local24 * 0.001);
	float Local32 = math::frac(Local31);
	float2 Local33 = (float2(Local32,Local28) + CustomizedUV0_mdl);
	float4 Local34 = ::greyscale_texture_lookup(tex::lookup_float4(texture_2d("./Textures/T_Sky_Clouds_M.png",::tex::gamma_srgb),float2(Local33.x,1.0-Local33.y),tex::wrap_repeat,tex::wrap_repeat));
	float Local35 = math::lerp(Local30.x,Local34.x,Local6);
	float3 Local36 = ((::convert_to_left_hand(state::transform_point(state::coordinate_internal,state::coordinate_world,state::position()), true)*state::meters_per_scene_unit()*100.0) - ::object_world_position(true));
	float Local37 = (::object_radius() * -0.1);
	float3 Local38 = (Local36 / Local37);
	float Local39 = math::min(math::max(Local38.z,0.0),1.0);
	float Local40 = (1.0 - Local39);
	float Local41 = (Local40 * Cloudopacity);
	float Local42 = math::lerp(0.0,Local35,Local41);
	float2 Local43 = (CustomizedUV0_mdl * 0.5);
	float4 Local44 = ::greyscale_texture_lookup(tex::lookup_float4(texture_2d("./Textures/T_Sky_Clouds_M.png",::tex::gamma_srgb),float2(Local43.x,1.0-Local43.y),tex::wrap_repeat,tex::wrap_repeat));
	float Local45 = math::lerp(NoisePower1,NoisePower2,Local44.x);
	float Local46 = math::pow(math::max(Local42,float(0.000001)),Local45);
	float3 Local47 = (float3(Cloudcolor.x,Cloudcolor.y,Cloudcolor.z) * Local46);
	float Local48 = math::max(0.00001,1.3);
	float Local49 = (1.0 / Local48);
	float Local50 = (Local14 * Local49);
	float Local51 = (1.0 - Local50);
	float Local52 = (Local51 * 1.0);
	float Local53 = math::saturate(Local52);
	float Local54 = math::pow(math::max(Local53,float(0.000001)),10.0);
	float Local55 = math::min(math::max(Local54,0.0),1.0);
	float3 Local56 = (Local55 * float3(Suncolor.x,Suncolor.y,Suncolor.z));
	float Local57 = (Local46 * Local46);
	float Local58 = (Local57 * 0.4);
	float3 Local59 = (Local56 * Local58);
	float3 Local60 = (Local47 + Local59);
	float Local61 = math::min(math::max(Local57,0.0),1.0);
	float3 Local62 = math::lerp(Local23,Local60,Local61);
	float3 Local63 = (Local62 * float3(OverallColor.x,OverallColor.y,OverallColor.z));
	float3 Local64 = (Local63 * 1.5);

	float3 EmissiveColor_mdl = Local64;
	float OpacityMask_mdl = 1.0;
	float SurfaceThickness_mdl = 0.01;

	} in
		::OmniUe4Base(
			opacity: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			two_sided: false,
			is_unlit: true);
